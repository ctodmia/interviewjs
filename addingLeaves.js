//Given a binary tree with nodes having a single digit int (0-9),
//find the sum of all the numbers generated by all the paths starting
//from root to leaf nodes

/* Illustration of a tree with three leaves:

var treeLeaf = {
  	value: 7, children: [
  		{
	  		value: 5, children: [
	  			{
		  			value: 3, children: [
		  				{
		  					value: 1, children: []
		  				}
		  			]
	  			},

	  			{
	  				value: 4, children: []
	  			}
	  		]
  		},

  		{
  			value: 6, children: []
  		}
  	]
}

treeLeaf will construct the following tree
  *
  *       7 <- root
  *      / \
  *     5    6 <- leaf
  *    / \
  *   3   4 <- leaf
  *  /
  * 1 <- leaf
  *
  * Your answer should yield the following 
  *
  * sumLeaves(treeLeaf); // 8361;
  *
  *	because 7531 + 754 + 76 = 8361;
  *
  */


/*
	Problem Analysis

	/ every node on tree is an object with a value and an array of children
	/ a leaf is a tree with an empty array of children
	/ since we want concatenated value of all paths from root to leaf
		/I will traverse the tree depth first. 
	/ a path ends when it reaches a leaf

	create a function called sumLeaves that takes a tree object as a parameter. 
	find the sum of all numbers generated by all the paths from root to leaf. 
*/

//create function called sumLeaves that takes a tree object as a parameter
var sumLeaves = function(obj) {
	//create an empty string called path
	var path = '';
	//create a variable called sum that is equal to zero
	var sum = 0;
	//create a subroutine that takes a node and a current path as an argument
	var subroutine = function (node, currentpath) {
		//if the node doesnt have any children
		if(node.children.length === 0) {
			// add the node value to the path
			path += node.value;
			//convert path to a number and add the path to the sum. 
			sum += Number(path);
			//remove the last number for the path
			path = path.substring(0, path.length-1);
		//else if the node does have children
		} else {
			//iterate through the current node's children
			for(var i=0; i<node.children.length; i++) {
				//add the current node value to path
				path += node.value;
				//run the subroutine on the node children at i and the 
				//path
				subroutine(node.children[i], path);
				//remove the last number from the path 
				path = path.substring(0, path.length-1);
			}
		}

	}
	//invoke the subroutine on the tree obj and the path;
	subroutine(obj, path);
	//return the sum
	return sum; 

}








var sumLeaves = function(obj) {
	var path = "";
	var sum = 0; 
	var subroutine = function (node, currentpath) {
		if(node.children.length===0) {
			path += node.value;
			sum += Number(path); 
			path = path.substring(0, path.length-1);
		} else {
			for(var i=0; i<node.children.length; i++) {
				path += node.value;
				subroutine(node.children[i], path);
				path = path.substring(0, path.length-1)
			}
		}
	}
	subroutine(obj, path);
	return sum; 
}